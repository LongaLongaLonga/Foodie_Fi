-- Case Study #3 Foodie Fi (https://8weeksqlchallenge.com/case-study-3/)

-- B. Data Analysis Questions

-- How many customers has Foodie-Fi ever had?

SELECT
COUNT(DISTINCT CUSTOMER_ID) AS CUSTOMERS
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS;

--What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value;

SELECT
DATE_PART('MONTH', START_DATE) AS START_MONTH,
COUNT(CUSTOMER_ID) AS CUSTOMER_COUNT
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUB ON SUB.PLAN_ID = PLANS.PLAN_ID
WHERE PLAN_NAME = 'trial'
GROUP BY START_MONTH
ORDER BY START_MONTH ASC;

-- What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name.

SELECT
COUNT(PLAN_NAME) AS PLAN_COUNT,
PLAN_NAME
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUB ON SUB.PLAN_ID = PLANS.PLAN_ID
WHERE DATE_PART('year', START_DATE) >= 2021
GROUP BY PLAN_NAME
ORDER BY PLAN_COUNT DESC;

-- What is the customer count and percentage of customers who have churned rounded to 1 decimal place?

WITH SUBSCRIPTION AS (

SELECT
COUNT( DISTINCT CUSTOMER_ID) AS CUSTOMER_COUNT,
ROW_NUMBER() OVER (ORDER BY 1) AS RN
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
) 

, CHURNED AS (
SELECT 
PLANS.PLAN_NAME,
COUNT(SUBS.CUSTOMER_ID) AS CHURNED_CUSTOMERS,
ROW_NUMBER() OVER (ORDER BY 1) AS RN
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS ON PLANS.PLAN_ID = SUBS.PLAN_ID
WHERE PLAN_NAME = 'churn'
GROUP BY PLANS.PLAN_NAME

)
, JOINED AS (
SELECT
CHURNED_CUSTOMERS,
CUSTOMER_COUNT
FROM CHURNED AS C
JOIN SUBSCRIPTION AS S ON S.RN = C.RN
)

SELECT
CUSTOMER_COUNT,
CHURNED_CUSTOMERS, 
ROUND((CHURNED_CUSTOMERS/CUSTOMER_COUNT) * 100, 1) AS PERCENT_CHURNED
FROM JOINED;

-- How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?

WITH CUST_TABLE AS (

SELECT
CUSTOMER_ID,
PLAN_NAME,
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID ORDER BY START_DATE ASC) AS RN
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS ON SUBS.PLAN_ID = PLANS.PLAN_ID
)

SELECT 
COUNT(DISTINCT CUSTOMER_ID) AS CHURNED_CUST,
ROUND((COUNT(DISTINCT CUSTOMER_ID) / (SELECT COUNT(DISTINCT CUSTOMER_ID) FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS)) * 100, 0) AS PERCENT_CHURNED
FROM CUST_TABLE 
WHERE RN = 2
AND PLAN_NAME = 'churn';

-- What is the number and percentage of customer plans after their initial free trial?

WITH CUST_TABLE AS (

SELECT
CUSTOMER_ID,
PLAN_NAME,
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID ORDER BY START_DATE ASC) AS RN
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS ON SUBS.PLAN_ID = PLANS.PLAN_ID

) 

SELECT 
PLAN_NAME,
COUNT(DISTINCT CUSTOMER_ID) AS CUSTOMER_COUNT,
ROUND((COUNT(DISTINCT CUSTOMER_ID) / (SELECT COUNT(DISTINCT CUSTOMER_ID) FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS)) * 100, 0) AS PERCENT
FROM CUST_TABLE 
WHERE RN = 2
AND PLAN_NAME != 'churn'
GROUP BY PLAN_NAME;

-- What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?

WITH CUST_TABLE AS (

SELECT
*, 
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID ORDER BY START_DATE DESC) as RN
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS
WHERE START_DATE <= '2020-12-31'
) 

SELECT 
PLAN_NAME,
COUNT(DISTINCT CUSTOMER_ID) AS CUSTOMER_COUNT,
ROUND((COUNT(DISTINCT CUSTOMER_ID) / (SELECT COUNT(DISTINCT CUSTOMER_ID) FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS)) * 100, 0) AS PERCENT
FROM CUST_TABLE
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS ON CUST_TABLE.PLAN_ID = PLANS.PLAN_ID
WHERE RN = 1
GROUP BY PLAN_NAME;

-- How many customers have upgraded to an annual plan in 2020?

SELECT 
COUNT(DISTINCT CUSTOMER_ID) AS CUSTOMER_COUNT
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS
JOIN TIL_PLAYGROUND.CS3_FOODIE_FI.PLANS AS PLANS ON SUBS.PLAN_ID = PLANS.PLAN_ID
WHERE START_DATE > '2019-12-31' AND START_DATE < '2021-01-01'
AND PLAN_NAME = 'pro annual';

 
-- How many days on average does it take for a customer to an annual plan from the day they join Foodie-Fi?

WITH TRIAL AS (

SELECT 
CUSTOMER_ID,
START_DATE AS TRIAL_START
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS
WHERE PLAN_ID = 0
)

, ANNUAL AS (

SELECT
CUSTOMER_ID,
START_DATE AS ANNUAL
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE PLAN_ID = 3
)

SELECT 
ROUND(AVG(DATEDIFF('day', TRIAL_START, ANNUAL)), 0) AS AVERAGE_DAYS
FROM TRIAL AS T
INNER JOIN ANNUAL AS A ON A.CUSTOMER_ID = T.CUSTOMER_ID;

-- Can you further breakdown this average value into 30 day periods (i.e. 0-30 days, 31-60 days etc.)?

WITH TRIAL AS (

SELECT 
CUSTOMER_ID,
START_DATE AS TRIAL_START
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS AS SUBS
WHERE PLAN_ID = 0
)

, ANNUAL AS (

SELECT
CUSTOMER_ID,
START_DATE AS ANNUAL
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE PLAN_ID = 3
)

SELECT
CASE 
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 30 THEN '0-30'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 60 THEN '31-60'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 90 THEN '61-90'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 120 THEN '91-120'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 150 THEN '121-150'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 180 THEN '151-180'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 210 THEN '181-210'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 240 THEN '211-240'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 270 THEN '241-270'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) <= 300 THEN '271-300'
WHEN DATEDIFF('day', TRIAL_START, ANNUAL) > 300 THEN '301+'
END AS BREAKDOWN,
COUNT(T.CUSTOMER_ID) AS CUSTOMER_COUNT
FROM TRIAL AS T
INNER JOIN ANNUAL AS A ON A.CUSTOMER_ID = T.CUSTOMER_ID
GROUP BY 1
ORDER BY CUSTOMER_COUNT DESC;

--How many customers downgraded from a pro monthly to a basic monthly plan in 2020?

WITH PRO_MON AS (

SELECT 
CUSTOMER_ID,
START_DATE AS PRO_MONTHLY_START
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE PLAN_ID = 2
)

, BASIC_MON AS (

SELECT 
CUSTOMER_ID,
START_DATE AS BASIC_MONTHLY_START
FROM TIL_PLAYGROUND.CS3_FOODIE_FI.SUBSCRIPTIONS
WHERE PLAN_ID = 1
)

SELECT 
P.CUSTOMER_ID,
PRO_MONTHLY_START,
BASIC_MONTHLY_START
FROM PRO_MON AS P
INNER JOIN BASIC_MON as B on P.CUSTOMER_ID = B.CUSTOMER_ID
WHERE PRO_MONTHLY_START < BASIC_MONTHLY_START
AND DATE_PART('year', BASIC_MONTHLY_START) = 2020;
